
R version 4.0.2 (2020-06-22) -- "Taking Off Again"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

Hi Jim, welcome to R
R> # *------------------------------------------------------------------
R> # | PROGRAM NAME: 
R> # | FILE NAME: .R
R> # | DATE: 
R> # | CREATED BY:  Jim Stagge         
R> # *----------------------------------------------------------------
R> # | PURPOSE:  
R> # | 
R> # |
R> # *------------------------------------------------------------------
R> 
R> 
R> ###########################################################################
R> ###  Load functions
R> ###########################################################################
R> require(tidyverse)
Loading required package: tidyverse
── Attaching packages ─────────────────────────────────────────────────────────── tidyverse 1.3.0 ──
✔ ggplot2 3.3.2     ✔ purrr   0.3.4
✔ tibble  3.0.1     ✔ dplyr   1.0.2
✔ tidyr   1.0.2     ✔ stringr 1.4.0
✔ readr   1.3.1     ✔ forcats 0.5.0
── Conflicts ────────────────────────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
R> require(here)
Loading required package: here
here() starts at /media/data/Documents/work_folder/projects_research/code/spibayes_paper
R> 
R> ### To access GHCND
R> require(rnoaa)
Loading required package: rnoaa
Registered S3 method overwritten by 'hoardr':
  method           from
  print.cache_info httr
R> 
R> ### To save in SVG
R> require(svglite)
Loading required package: svglite
R> require(viridis)
Loading required package: viridis
Loading required package: viridisLite
R> 
R> ### Packages for spi
R> require(fitdistrplus)
Loading required package: fitdistrplus
Loading required package: MASS

Attaching package: ‘MASS’

The following object is masked from ‘package:dplyr’:

    select

Loading required package: survival
Loading required package: npsurv
Loading required package: lsei
R> require(lubridate)
Loading required package: lubridate

Attaching package: ‘lubridate’

The following objects are masked from ‘package:base’:

    date, intersect, setdiff, union

R> 
R> select <- dplyr::select
R> 
R> theme_set(theme_classic(8))
R> 
R> ###########################################################################
R> ## Set the Paths
R> ###########################################################################
R> ### Set here path 
R> here_path <- here::here()
R> 
R> ### Path for Data and Output	
R> data_path <- file.path(here_path, "./data")
R> output_path <- file.path(here_path, "./output")
R> 
R> ### Set up output folders
R> write_output_base <- file.path(output_path, "synth_precip")
R> dir.create(write_output_base, recursive=TRUE, showWarnings = FALSE)
R> 
R> ### Set up figure folder
R> write_figures_base <- file.path(output_path, "figures/synth_precip")
R> dir.create(write_figures_base, recursive=TRUE, showWarnings = FALSE)
R> 
R> 
R> ###########################################################################
R> ## Set initial values
R> ###########################################################################
R> ### Set seed so everyone gets the same random numbers (reproducible example)
R> set.seed(7890)
R> 
R> ### SPI-3 3 months equals 92 days
R> n_roll <- 92
R> 
R> 
R> 
R> ###########################################################################
R> ###  Create a true SPI time series
R> ###########################################################################
R> ### Assume 100 years from 1920 to 2019, will then take subsets of this
R> spi_true <- data.frame(date = seq(as.Date("1920-01-01"), as.Date("2019-12-31"), by = "1 day")) %>%
+ 	mutate(jdate = yday(date)) %>%
+ 	mutate(month_day = paste0(month(date),"-",day(date))) %>%
+ 	mutate(year = year(date))
R> 
R> n_days <- dim(spi_true)[1]
R> 
R> ### Use a 92 day moving average MA(91) with innovations of sqrt(92)/n_roll, which produces N(0,1)
R> ### Technically, the moving average would be on precip, not SPI, but this is a very close approximation
R> innov_c <- rnorm(n_days, 0, sqrt(n_roll))
R> 
R> ### Generate SPI series using an MA(91) model with coef of 1. Need to remove the first 91 values
R> sim_spi <- arima.sim(list(order = c(0,0,(n_roll - 1)), ma = rep(1,(n_roll -1))), n = n_days, innov=innov_c/n_roll)
R> sim_spi[seq(1,(n_roll-1))] <- NA
R> 
R> spi_true <- spi_true %>%
+ 	mutate(innov = innov_c/n_roll) %>%
+ 	mutate(spi = c(sim_spi))
R> 
R> ggplot(spi_true, aes(x=date, y=spi)) + geom_line() + theme_classic()
Warning message:
Removed 91 row(s) containing missing values (geom_path). 
R> 
R> mean(spi_true$spi, na.rm=TRUE)
[1] 0.01097854
R> sd(spi_true$spi, na.rm=TRUE)
[1] 0.968556
R> 
R> ###########################################################################
R> ###  Make up synthetic gamma distribution (stationary)
R> ###########################################################################
R> ### Make some daily synthetic distributions that vary smoothly through time
R> true_param_stat <- tibble(jdate = seq(1,365), shape = rep(1.7, 365)) %>%
+ 	mutate(theta = case_when( jdate <=182 ~ 0.05 + (0.05/182)*jdate, 
+ 		jdate > 182 ~ 0.1 - (0.05/183)*(jdate - 182))
+ 	) %>%
+ 	mutate(mean = sin(((2*pi)/365)*jdate)+5+0.4*sin(((10*pi)/365)*jdate)) %>%
+ 	mutate(scale = mean / shape) %>%
+ 	mutate(rate = 1/scale) %>%
+ 	mutate(disp = 1/shape) %>%
+ 	select(jdate, shape, scale, scale, rate, theta, mean, disp)
R> 
R> 
R> ###########################################################################
R> ###  Plot the underlying distribution
R> ###########################################################################
R> write_output_path <- file.path(write_output_base, "stationary")
R> dir.create(write_output_path, recursive=TRUE, showWarnings = FALSE)
R> 
R> ### Set up figure folder
R> write_figures_path <- file.path(write_figures_base, "stationary")
R> dir.create(write_figures_path, recursive=TRUE, showWarnings = FALSE)
R> 
R> ### Plot how this looks
R> plot_df <- true_param_stat %>% 
+ 	gather("param", "value", -jdate) %>%
+ 	mutate(origin = "true") %>%
+ 	mutate(param = factor(param, levels = c("mean", "scale", "rate", "shape", "disp", "theta"), labels = c("Mean", "Scale", "Rate", "Shape", "Dispersion", "Theta")))
R> 
R> ### Create the figure
R> p <- ggplot(plot_df, aes(x=jdate, y=value)) %>%
+ 	+ geom_line() %>%
+ 	+ facet_grid(param ~ ., scales="free_y") %>%
+ 	+ theme_bw(8) %>%
+ 	+ theme(panel.grid.minor = element_blank()) %>%
+ 	+ scale_x_continuous(name = "Julian Date", breaks=seq(0,365, 30), expand=c(0,0)) %>%
+ 	+ scale_y_continuous(name = "True Parameter Value") %>%
+ 	+ coord_cartesian(xlim=c(1, 365))
R> 
R> p
R> 
R> ### Save Figure
R> ggsave(file.path(write_figures_path, "synth_true_params.png"), p, width =5, height = 7, dpi = 300)
R> ggsave(file.path(write_figures_path, "synth_true_params.pdf"), p, width =5, height = 7)
R> ggsave(file.path(write_figures_path, "synth_true_params.svg"), p, width =5, height = 7)
R> 
R> 
R> 
R> ### Create the figure
R> p <- ggplot(plot_df %>% filter(param != "Dispersion" & param != "Rate"), aes(x=jdate, y=value)) %>%
+ 	+ geom_line() %>%
+ 	+ facet_grid(param ~ ., scales="free_y") %>%
+ 	+ theme_bw(8) %>%
+ 	+ theme( panel.grid.minor = element_blank()) %>%
+ 	+ scale_x_continuous(name = "Julian Date", breaks=seq(0,365, 30), expand=c(0,0)) %>%
+ 	+ scale_y_continuous(name = "True Parameter Value") %>%
+ 	+ coord_cartesian(xlim=c(1, 365))
R> 
R> p
R> 
R> ### Save Figure
R> ggsave(file.path(write_figures_path, "synth_true_params_subset.png"), p, width =5, height = 7, dpi = 300)
R> ggsave(file.path(write_figures_path, "synth_true_params_subset.pdf"), p, width =5, height = 7)
R> ggsave(file.path(write_figures_path, "synth_true_params_subset.svg"), p, width =5, height = 7)
R> 
R> 
R> ###########################################################################
R> ###  Sample from this distribution
R> ###########################################################################
R> ### Apply day 365 to day 366, join with true parameters, and then return to the original format
R> synth_stat_df <- spi_true %>%
+ 	mutate(jdate = case_when(
+ 			jdate == 366 ~ 365,
+ 			TRUE ~ jdate)
+ 	) %>%
+ 	left_join(true_param_stat) %>%
+ 	mutate(jdate = yday(date)) 
Joining, by = "jdate"
R> 
R> ### First transform SPI into percentile. Then set zeros when percentile is below theta threshold
R> ### Stretch the remaining probability space so that it fills the space (0 to 1)
R> ### Then sample from gamma distribution and combine with zeros
R> synth_stat_df <- synth_stat_df %>% 
+ 	mutate(p_overall = pnorm(spi)) %>%
+ 	mutate(spi_thresh = qnorm(theta)) %>%
+ 	mutate(precip_zero = case_when(
+ 		p_overall < theta ~ 0,
+ 		TRUE ~ NA_real_)) %>%
+ 	mutate(p_precip =  case_when(
+ 		is.na(precip_zero) ~ p_overall - theta,
+ 		TRUE ~ NA_real_)) %>%
+ 	mutate(scale_factor = 1/(1-theta)) %>%
+ 	mutate(p_precip = p_precip*scale_factor) %>%
+ 	mutate(precip = case_when(
+ 		precip_zero == 0 ~ 0,
+ 		is.na(precip_zero) ~ qgamma(p_precip, shape = shape, scale = scale),
+ 		TRUE ~ NA_real_)
+ 	) %>%
+ 	select(-p_overall, precip_zero, p_precip, scale_factor) %>%
+ 	mutate(zero = precip == 0)
R> 
R> 
R> 
R> ###########################################################################
R> ###  Plot the stationary synthetic distribution
R> ###########################################################################
R> p <- ggplot(synth_stat_df, aes(x=jdate, y=precip, colour=zero, group = year)) %>%
+ #	+ geom_jitter(alpha=0.2) %>%
+ 	+ geom_line(alpha = 0.2) %>%
+ 	+ scale_x_continuous(name = "Julian Date", breaks=seq(1,365, 30), expand=c(0,0)) %>%
+ 	+ scale_y_continuous(name = "3-month Precip") %>%
+ 	+ theme(legend.position = "none")%>%
+ 	+ coord_cartesian(xlim=c(1, 365))
R> 
R> p
Warning message:
Removed 91 row(s) containing missing values (geom_path). 
R> 
R> ### Save Figure
R> ggsave(file.path(write_figures_path, "synth_precip_jdate.png"), p, width =5, height = 4.5, dpi = 300)
Warning message:
Removed 91 row(s) containing missing values (geom_path). 
R> ggsave(file.path(write_figures_path, "synth_precip_jdate.pdf"), p, width =5, height = 4.5)
Warning message:
Removed 91 row(s) containing missing values (geom_path). 
R> ggsave(file.path(write_figures_path, "synth_precip_jdate.svg"), p, width =5, height = 4.5)
Warning message:
Removed 91 row(s) containing missing values (geom_path). 
R> 
R> 
R> p <- ggplot(synth_stat_df %>% filter(zero == FALSE), aes(x=date, y=precip, colour=zero)) %>%
+ 	+ geom_line() %>%
+ 	+ geom_point(data = synth_stat_df %>% filter(zero == TRUE)) %>%
+ #	+ scale_x_continuous(name = "Julian Date", breaks=seq(1,365, 30), expand=c(0,0)) %>%
+ 	+ scale_y_continuous(name = "3-month Precip") %>%
+ 	+ scale_colour_manual(values = c("grey30", "#e41a1c")) %>%
+ 	+ theme(legend.position = "none")
R> 
R> p
R> 
R> ### Save Figure
R> ggsave(file.path(write_figures_path, "synth_precip_fullseries.png"), p, width =7, height = 4.5, dpi = 300)
R> ggsave(file.path(write_figures_path, "synth_precip_fullseries.pdf"), p, width =7, height = 4.5)
R> ggsave(file.path(write_figures_path, "synth_precip_fullseries.svg"), p, width =7, height = 4.5)
R> 
R> 
R> p <- ggplot(synth_stat_df, aes(x=date, y=spi)) %>%
+ 	+ geom_hline(yintercept = 0, size=0.15, colour="grey80") %>%
+ 	+ geom_ribbon(aes(ymin = -99, ymax = spi_thresh), fill = "red", alpha=0.2) %>%
+ 	+ geom_line(aes(colour=zero, group = year), size = 0.15) %>%
+ #	+ geom_point(data = y_df %>% filter(zero == TRUE)) %>%
+ 	+ scale_x_date(name = "Date", breaks=seq(as.Date("1920-01-01"), as.Date("2020-01-01"), by = "10 years"), expand=c(0,0), date_labels = "%Y") %>%
+ 	+ scale_y_continuous(name = "SPI") %>%
+ 	+ scale_colour_manual(values = c("grey30", "#e41a1c")) %>%
+ 	+ theme(legend.position = "none") %>%
+ 	+ coord_cartesian(ylim=c(-3.5, 3.5))
R> 
R> p
Warning message:
Removed 91 row(s) containing missing values (geom_path). 
R> 
R> ### Save Figure
R> ggsave(file.path(write_figures_path, "synth_spi_fullseries.png"), p, width =6, height = 3, dpi = 300)
Warning message:
Removed 91 row(s) containing missing values (geom_path). 
R> ggsave(file.path(write_figures_path, "synth_spi_fullseries.pdf"), p, width =6, height = 3)
Warning message:
Removed 91 row(s) containing missing values (geom_path). 
R> ggsave(file.path(write_figures_path, "synth_spi_fullseries.svg"), p, width =6, height = 3)
Warning message:
Removed 91 row(s) containing missing values (geom_path). 
R> 
R> 
R> 
R> 
R> 
R> 
R> 
R> 
R> 
R> 
R> 
R> ###########################################################################
R> ###  Make up non-stationary time series
R> ###########################################################################
R> ### Make some daily synthetic distributions that vary smoothly through time
R> ### Have to do a few things to make sure 1975 is identical for stationary and non-stationary
R> true_param_non_stat <- spi_true %>% 
+ 	mutate( year_frac = decimal_date(date)) %>%
+ 	mutate(shape = 1.75) %>%
+ 	mutate(theta = case_when( jdate <=182 ~ 0.05 + (0.05/182)*jdate+0.015, 
+ 		jdate > 182 ~ 0.1 - (0.05/183)*(jdate - 182)+.015)
+ 	) %>%
+ 	mutate(theta = case_when( year >= 1960 ~ theta - 0.001 *(year - 1960), 
+ 		TRUE ~ theta
+ 	)) %>%
+ 	mutate(mean = sin(((2*pi)/365)*jdate)+0.4*sin(((10*pi)/365)*jdate)) %>%
+ 	mutate(mean = 20 + mean + 0.05* mean*(year_frac-1900)) %>%  ### This line gives the mean a trend over long periods
+ 	mutate(mean = mean*0.2094296 + 0.8132083) %>%
+ 	mutate(scale = mean / shape) %>%
+ 	mutate(rate = 1/scale) %>%
+ 	mutate(disp = 1/shape) %>%
+ 	select(-year_frac)
R> 
R> 
R> ### Make sure that the stationary and nonstationary line up at year 1975
R> ### Quick check plots
R> check_plot <- true_param_non_stat %>% left_join(true_param_stat, by ="jdate")
R> 
R> ggplot(check_plot, aes(x=date, y=mean.x)) + geom_line() + geom_line(aes(y=mean.y), colour="red")
R> ggplot(check_plot, aes(x=date, y=theta.x)) + geom_line() + geom_line(aes(y=theta.y), colour="red")
R> 
R> ggplot(check_plot %>% filter(year == 1975), aes(x=date, y=mean.x)) + geom_line() + geom_line(aes(y=mean.y), colour="red")
R> 
R> ggplot(check_plot %>% filter(year == 1975), aes(x=date, y=theta.x)) + geom_line() + geom_line(aes(y=theta.y), colour="red")
R> 
R> ggplot(check_plot, aes(x=jdate, y=mean.x, group = year)) + geom_line() + geom_line(aes(y=mean.y), colour="red")
Warning message:
Removed 25 row(s) containing missing values (geom_path). 
R> ggplot(check_plot, aes(x=jdate, y=theta.x, group = year)) + geom_line() + geom_line(aes(y=theta.y), colour="red")
Warning message:
Removed 25 row(s) containing missing values (geom_path). 
R> 
R> 
R> ###########################################################################
R> ###  Plot the underlying distribution
R> ###########################################################################
R> write_output_path <- file.path(write_output_base, "nonstationary")
R> dir.create(write_output_path, recursive=TRUE, showWarnings = FALSE)
R> 
R> ### Set up figure folder
R> write_figures_path <- file.path(write_figures_base, "nonstationary")
R> dir.create(write_figures_path, recursive=TRUE, showWarnings = FALSE)
R> 
R> ### Plot how this looks	
R> p <- ggplot(true_param_non_stat, aes(x=jdate, y=mean, group=year)) %>%
+ 	+  geom_line(aes(colour=year)) %>%
+ 	+ scale_colour_viridis(name = "Year", option = "cividis") %>%
+ 	+ scale_y_continuous(name = "True Mean") %>%
+ 	+ scale_x_continuous(name = "Julian Date", breaks = round(seq(1, 365, length.out=13)), expand=c(0,0)) %>%
+ 	+ coord_cartesian(xlim=c(1, 365)) 
R> 	
R> p	
R> 
R> ### Plot surface for Mean
R> plot_df <- true_param_non_stat %>% filter(jdate <= 365)
R> 
R> p <- ggplot(plot_df, aes(x=jdate, y=year)) %>%
+ 	+ geom_tile(aes(fill=mean)) %>%
+ 	+ scale_fill_viridis(name = "True\nMean") %>%
+ 	+ theme_bw(8) %>%
+ 	+ theme(panel.grid.minor = element_blank()) %>%
+ 	+ scale_x_continuous(name = "Julian Date", breaks=seq(0,365, 30), expand=c(0,0)) %>%
+ 	+ scale_y_continuous(name = "Year", expand=c(0,0)) %>%
+ 	+ coord_cartesian(xlim=c(1,365), ylim=c(1920,2020))
R> 
R> p
R> 
R> ### Save Figure
R> ggsave(file.path(write_figures_path, "synth_nonstat_mean_true_surface.png"), p, width =6.5, height = 6, dpi = 300)
R> ggsave(file.path(write_figures_path, "synth_nonstat_true_params_subset.pdf"), p, width =6.5, height = 6)
R> ggsave(file.path(write_figures_path, "synth_nonstat_true_params_subset.svg"), p, width =6.5, height = 6)
R> 
R> ### Plot surface for Theta
R> plot_df <- true_param_non_stat %>% filter(jdate <= 365)
R> 
R> p <- ggplot(plot_df, aes(x=jdate, y=year)) %>%
+ 	+ geom_tile(aes(fill=theta)) %>%
+ 	+ scale_fill_viridis(name = "True\nTheta") %>%
+ 	+ theme_bw(8) %>%
+ 	+ theme(panel.grid.minor = element_blank()) %>%
+ 	+ scale_x_continuous(name = "Julian Date", breaks=seq(0,365, 30), expand=c(0,0)) %>%
+ 	+ scale_y_continuous(name = "Year", expand=c(0,0)) %>%
+ 	+ coord_cartesian(xlim=c(1,365), ylim=c(1920,2020))
R> 
R> p
R> 
R> ### Save Figure
R> ggsave(file.path(write_figures_path, "synth_nonstat_theta_true_surface.png"), p, width =6.5, height = 6, dpi = 300)
R> ggsave(file.path(write_figures_path, "synth_nonstat_theta_params_subset.pdf"), p, width =6.5, height = 6)
R> ggsave(file.path(write_figures_path, "synth_nonstat_theta_params_subset.svg"), p, width =6.5, height = 6)
R> 
R> 
R> ### Create a jdate plot
R> plot_df <- true_param_non_stat %>% 
+ 	select(jdate, year, mean, shape, scale, theta) %>%
+ 	gather("param", "value", -jdate, -year)
R> 
R> single_line_shape <- plot_df %>% filter(param == "shape" & year == 1920)
R> 
R> plot_df <- plot_df %>%
+ 	filter(param != "shape") %>%
+ 	bind_rows(single_line_shape) %>%
+ 	mutate(param = factor(param, levels = c("mean", "scale", "rate", "shape", "disp", "theta"), labels = c("Mean", "Scale", "Rate", "Shape", "Dispersion", "Theta")))
R> 	
R> p <- ggplot(plot_df, aes(x=jdate, y=value, group=year)) %>% 
+     + geom_line(aes(colour=year)) %>%
+ 	+ scale_colour_viridis(name = "Year", option="inferno") %>%
+ 	+ facet_grid(param ~ ., scales="free_y") %>%
+ 	+ theme_bw(8) %>%
+ 	+ theme(panel.grid.minor = element_blank()) %>%
+ 	+ scale_x_continuous(name = "Julian Date", breaks=seq(0,365, 30), expand=c(0,0)) %>%
+ 	+ scale_y_continuous(name = "True Parameter Value") %>%
+ 	+ coord_cartesian(xlim=c(1, 365))
R> 
R> p
R> 
R> ### Save Figure
R> ggsave(file.path(write_figures_path, "synth_nonstat_true_params.png"), p, width =6, height = 7, dpi = 300)
R> ggsave(file.path(write_figures_path, "synth_nonstat_true_params.pdf"), p, width =6, height = 7)
R> ggsave(file.path(write_figures_path, "synth_nonstat_true_params.svg"), p, width =6, height = 7)
R> 
R> 
R> 
R> ###########################################################################
R> ###  Sample from this distribution
R> ###########################################################################
R> ### Apply day 365 to day 366, join with true parameters, and then return to the original format
R> synth_non_stat_df <- spi_true %>%
+ 	mutate(jdate = case_when(
+ 			jdate == 366 ~ 365,
+ 			TRUE ~ jdate)
+ 	) %>%
+ 	left_join(true_param_non_stat) %>%
+ 	mutate(jdate = yday(date)) 
Joining, by = c("date", "jdate", "month_day", "year", "innov", "spi")
R> 
R> ### First transform SPI into percentile. Then set zeros when percentile is below theta threshold
R> ### Stretch the remaining probability space so that it fills the space (0 to 1)
R> ### Then sample from gamma distribution and combine with zeros
R> synth_non_stat_df <- synth_non_stat_df %>% 
+ 	mutate(p_overall = pnorm(spi)) %>%
+ 	mutate(spi_thresh = qnorm(theta)) %>%
+ 	mutate(precip_zero = case_when(
+ 		p_overall < theta ~ 0,
+ 		TRUE ~ NA_real_)) %>%
+ 	mutate(p_precip =  case_when(
+ 		is.na(precip_zero) ~ p_overall - theta,
+ 		TRUE ~ NA_real_)) %>%
+ 	mutate(scale_factor = 1/(1-theta)) %>%
+ 	mutate(p_precip = p_precip*scale_factor) %>%
+ 	mutate(precip = case_when(
+ 		precip_zero == 0 ~ 0,
+ 		is.na(precip_zero) ~ qgamma(p_precip, shape = shape, scale = scale),
+ 		TRUE ~ NA_real_)
+ 	) %>%
+ 	select(-p_overall, precip_zero, p_precip, scale_factor) %>%
+ 	mutate(zero = precip == 0)
R> 
R> 
R> ###########################################################################
R> ###  Plot the non-stationary syntehtic distribution
R> ###########################################################################
R> p <- ggplot(synth_non_stat_df, aes(x=jdate, y=precip, colour=zero, group = year)) %>%
+ #	+ geom_jitter(alpha=0.2) %>%
+ 	+ geom_line(alpha = 0.2) %>%
+ 	+ scale_x_continuous(name = "Julian Date", breaks=seq(1,365, 30), expand=c(0,0)) %>%
+ 	+ scale_y_continuous(name = "3-month Precip") %>%
+ 	+ theme(legend.position = "none")%>%
+ 	+ coord_cartesian(xlim=c(1, 365))
R> 
R> p
Warning message:
Removed 116 row(s) containing missing values (geom_path). 
R> 
R> ### Save Figure
R> ggsave(file.path(write_figures_path, "synth_precip_jdate.png"), p, width =5, height = 4.5, dpi = 300)
Warning message:
Removed 116 row(s) containing missing values (geom_path). 
R> ggsave(file.path(write_figures_path, "synth_precip_jdate.pdf"), p, width =5, height = 4.5)
Warning message:
Removed 116 row(s) containing missing values (geom_path). 
R> ggsave(file.path(write_figures_path, "synth_precip_jdate.svg"), p, width =5, height = 4.5)
Warning message:
Removed 116 row(s) containing missing values (geom_path). 
R> 
R> 
R> p <- ggplot(synth_non_stat_df %>% filter(zero == FALSE), aes(x=date, y=precip, colour=zero)) %>%
+ 	+ geom_line() %>%
+ 	+ geom_point(data = synth_non_stat_df %>% filter(zero == TRUE)) %>%
+ #	+ scale_x_continuous(name = "Julian Date", breaks=seq(1,365, 30), expand=c(0,0)) %>%
+ 	+ scale_y_continuous(name = "3-month Precip") %>%
+ 	+ scale_colour_manual(values = c("grey30", "#e41a1c")) %>%
+ 	+ theme(legend.position = "none")
R> 
R> p
R> 
R> ### Save Figure
R> ggsave(file.path(write_figures_path, "synth_precip_fullseries.png"), p, width =7, height = 4.5, dpi = 300)
R> ggsave(file.path(write_figures_path, "synth_precip_fullseries.pdf"), p, width =7, height = 4.5)
R> ggsave(file.path(write_figures_path, "synth_precip_fullseries.svg"), p, width =7, height = 4.5)
R> 
R> 
R> p <- ggplot(synth_non_stat_df, aes(x=date, y=spi)) %>%
+ 	+ geom_hline(yintercept = 0, size=0.15, colour="grey80") %>%
+ 	+ geom_ribbon(aes(ymin = -99, ymax = spi_thresh), fill = "red", alpha=0.2) %>%
+ 	+ geom_line(aes(colour=zero, group = year), size = 0.15) %>%
+ #	+ geom_point(data = y_df %>% filter(zero == TRUE)) %>%
+ 	+ scale_x_date(name = "Date", breaks=seq(as.Date("1920-01-01"), as.Date("2020-01-01"), by = "10 years"), expand=c(0,0), date_labels = "%Y") %>%
+ 	+ scale_y_continuous(name = "SPI") %>%
+ 	+ scale_colour_manual(values = c("grey30", "#e41a1c")) %>%
+ 	+ theme(legend.position = "none") %>%
+ 	+ coord_cartesian(ylim=c(-3.5, 3.5))
R> 
R> p
Warning message:
Removed 116 row(s) containing missing values (geom_path). 
R> 
R> ### Save Figure
R> ggsave(file.path(write_figures_path, "synth_spi_fullseries.png"), p, width =6, height = 3, dpi = 300)
Warning message:
Removed 116 row(s) containing missing values (geom_path). 
R> ggsave(file.path(write_figures_path, "synth_spi_fullseries.pdf"), p, width =6, height = 3)
Warning message:
Removed 116 row(s) containing missing values (geom_path). 
R> ggsave(file.path(write_figures_path, "synth_spi_fullseries.svg"), p, width =6, height = 3)
Warning message:
Removed 116 row(s) containing missing values (geom_path). 
R> 
R> 
R> 
R> ###########################################################################
R> ###  Save results from as an RDS file for analysis
R> ###########################################################################
R> 
R> ### Save results for next step
R> save(true_param_stat, true_param_non_stat, file = file.path(write_output_base, "true_param.RData"))
R> save(synth_stat_df, synth_non_stat_df, file = file.path(write_output_base, "synth_df.RData"))
R> 
R> write.csv(true_param_stat, file = file.path(write_output_base, "stationary/true_param_stat.csv"), row.names = FALSE)
R> write.csv(true_param_non_stat, file = file.path(write_output_base, "nonstationary/true_param_non_stat.csv"), row.names = FALSE)
R> 
R> write.csv(true_param_stat, file = file.path(write_output_base, "stationary/synth_stat_df.csv"), row.names = FALSE)
R> write.csv(true_param_non_stat, file = file.path(write_output_base, "nonstationary/synth_non_stat_df.csv"), row.names = FALSE)
R> 
R> 
R> 
R> 
R> 
R> 
R> 
> proc.time()
   user  system elapsed 
 27.729   1.152  32.218 
